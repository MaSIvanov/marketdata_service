import json
from datetime import date, timedelta
from typing import List, Dict, Any
from scheduler.clients.moex_client import MOEXClient
from scheduler.database.dao import insert_daily_candles  # ‚Üê —Ç–≤–æ—è –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏
from scheduler.database.engine import get_db
import logging
import time

logger = logging.getLogger("scheduler.candles")

def get_stocks_candles(raw_data: str) -> List[Dict[str, Any]]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.

    :param raw_data: –°—Ç—Ä–æ–∫–∞ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç API (–¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á "marketdata")
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–∞–º–∏: ticker, date, close, volume
    """
    try:
        data = json.loads(raw_data)
    except json.JSONDecodeError as e:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {e}")

    marketdata = data.get("marketdata")
    if not marketdata:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'marketdata' –≤ –æ—Ç–≤–µ—Ç–µ")

    columns = marketdata.get("columns")
    rows = marketdata.get("data")

    if not columns or not rows:
        return []

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    try:
        secid_idx = columns.index("SECID")
        last_idx = columns.index("LAST")
        voltoday_idx = columns.index("VOLTODAY")
    except ValueError as e:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ marketdata: {e}")

    # –í—á–µ—Ä–∞—à–Ω—è—è –¥–∞—Ç–∞
    target_date = date.today() - timedelta(days=1)

    result = []
    for row in rows:
        try:
            ticker = row[secid_idx]
            last = row[last_idx]
            voltoday = row[voltoday_idx]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ LAST ‚Äî null (–Ω–µ —Ç–æ—Ä–≥–æ–≤–∞–ª–∞—Å—å)
            if last is None:
                continue

            close = float(last)
            volume = int(voltoday) if voltoday is not None else 0

            # üî¥ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –æ–±—ä—ë–º <= 0
            if volume <= 0:
                continue

            result.append({
                "ticker": ticker,
                "date": target_date,
                "close": close,
                "volume": volume
            })
        except (TypeError, ValueError, IndexError) as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue

    return result


async def update_daily_candles():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å MOEX –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–µ—á–∏.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ 00:30.
    """
    logger.info("[Candles] üïó –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π...")

    start_time = time.time()

    async with MOEXClient() as client:
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ marketdata —Å –Ω—É–∂–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            raw_data = await client.get_stocks()
            if not raw_data or "marketdata" not in raw_data:
                logger.warning("[Candles] ‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return

            # 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç str)
            raw_json_str = json.dumps(raw_data, ensure_ascii=False)

            # 3. –ü–∞—Ä—Å–∏–º –≤ —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π (—Å –≤—á–µ—Ä–∞—à–Ω–µ–π –¥–∞—Ç–æ–π –∏ –±–µ–∑ null)
            candles = get_stocks_candles(raw_json_str)
            if not candles:
                logger.warning("[Candles] üì≠ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã)
            async with get_db() as db:
                await insert_daily_candles(db, candles)

            duration = time.time() - start_time
            logger.info(f"[Candles] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –∑–∞ {duration:.2f} —Å–µ–∫")

        except Exception as e:
            logger.error(f"[Candles] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}", exc_info=True)
            raise