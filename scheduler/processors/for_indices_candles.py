# scheduler/processors/for_indices_candles.py

import json
from datetime import datetime
from typing import List, Dict, Any
from scheduler.clients.moex_client import MOEXClient
from scheduler.database.dao import insert_daily_candles
from scheduler.database.engine import get_db
import logging
import time

logger = logging.getLogger("scheduler.indices_candles")

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –¥–ª—è –∏–Ω–¥–µ–∫—Å–æ–≤
VALID_BOARDIDS = {"RTSI", "SNDX"}


def get_indices_candles(raw_data: dict) -> List[Dict[str, Any]]:
    """
    –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç API –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π.
    –î–∞—Ç–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–æ–ª—è TRADEDATE (—É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD).

    :param raw_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç API (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –æ—Ç /iss/engines/stock/markets/index/...)
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: [{"ticker": str, "date": date, "close": float, "volume": int}, ...]
    """
    marketdata = raw_data.get("marketdata")
    if not marketdata:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'marketdata' –≤ –æ—Ç–≤–µ—Ç–µ")

    columns = marketdata.get("columns")
    rows = marketdata.get("data")

    if not columns or not rows:
        return []

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    try:
        secid_idx = columns.index("SECID")
        boardid_idx = columns.index("BOARDID")
        tradedate_idx = columns.index("TRADEDATE")
        lastvalue_idx = columns.index("CURRENTVALUE")  # –∏–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CURRENTVALUE ‚Äî –Ω–æ LASTVALUE ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        valtoday_idx = columns.index("VALTODAY")
    except ValueError as e:
        raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ –≤ marketdata: {e}")

    result = []
    for row in rows:
        try:
            secid = row[secid_idx]
            boardid = row[boardid_idx]

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
            if boardid not in VALID_BOARDIDS:
                continue

            tradedate_str = row[tradedate_idx]
            lastvalue = row[lastvalue_idx]
            valtoday = row[valtoday_idx]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –∏–ª–∏ —Ü–µ–Ω—ã
            if not tradedate_str or lastvalue is None:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –æ–±—ä—ë–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, null, –ø—É—Å—Ç–æ–π –∏–ª–∏ 0
            if valtoday in (None, "", 0, "0"):
                continue

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            try:
                candle_date = datetime.strptime(tradedate_str, "%Y-%m-%d").date()
            except ValueError:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã TRADEDATE: {tradedate_str} –¥–ª—è {secid}")
                continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –∏ –æ–±—ä—ë–º
            try:
                close = float(lastvalue)
                volume = int(float(valtoday))  # MOEX –∏–Ω–æ–≥–¥–∞ –æ—Ç–¥–∞—ë—Ç –æ–±—ä—ë–º –∫–∞–∫ float-—Å—Ç—Ä–æ–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "12345.0"
                if volume <= 0:
                    continue
            except (TypeError, ValueError):
                continue

            result.append({
                "ticker": secid,
                "date": candle_date,
                "close": close,
                "volume": volume
            })

        except (IndexError, KeyError, TypeError) as e:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue

    return result


async def update_indices_daily_candles():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å MOEX –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 00:30).
    """
    logger.info("[Indices Candles] üïó –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º...")

    start_time = time.time()

    async with MOEXClient() as client:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º (—Ç–æ—Ç –∂–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç, —á—Ç–æ –∏ –≤ for_indices.py)
            raw_data = await client.get_indexes()
            if not raw_data or "marketdata" not in raw_data:
                logger.warning("[Indices Candles] ‚ùå –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return

            # –ü–∞—Ä—Å–∏–º —Å–≤–µ—á–∏
            candles = get_indices_candles(raw_data)
            if not candles:
                logger.warning("[Indices Candles] üì≠ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            async with get_db() as db:
                await insert_daily_candles(db, candles)

            duration = time.time() - start_time
            logger.info(f"[Indices Candles] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –∑–∞ {duration:.2f} —Å–µ–∫")

        except Exception as e:
            logger.error(f"[Indices Candles] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}", exc_info=True)
            raise