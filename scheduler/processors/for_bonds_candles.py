import json
from datetime import date, timedelta
from typing import List, Dict, Any
import logging
import time

from scheduler.clients.moex_client import MOEXClient
from scheduler.database.dao import insert_daily_candles
from scheduler.database.engine import get_db

logger = logging.getLogger("scheduler.bond_candles")


def get_bond_candles(raw_data: Dict) -> List[Dict[str, Any]]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
      - PRICE –∏–∑ marketdata_yields –∫–∞–∫ close
      - VALTODAY –∏–∑ marketdata –∫–∞–∫ volume

    –û–±–ª–∏–≥–∞—Ü–∏–∏ –±–µ—Ä—É—Ç—Å—è –¢–û–õ–¨–ö–û –∏–∑ marketdata_yields.
    –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å marketdata ‚Äî –ø–æ (SECID, BOARDID).

    –û–±–ª–∏–≥–∞—Ü–∏–∏ —Å volume == 0 –∏–ª–∏ None –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    """
    target_date = date.today() - timedelta(days=1)

    # === 1. –ü–∞—Ä—Å–∏–º marketdata_yields (–∏—Å—Ç–æ—á–Ω–∏–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏ —Ü–µ–Ω—ã) ===
    yields_data = raw_data.get("marketdata_yields", {}).get("data", [])
    yields_columns = raw_data.get("marketdata_yields", {}).get("columns", [])
    if not yields_data or not yields_columns:
        return []

    try:
        secid_y_idx = yields_columns.index("SECID")
        boardid_y_idx = yields_columns.index("BOARDID")
        price_idx = yields_columns.index("PRICE")
    except ValueError as e:
        raise ValueError(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ marketdata_yields: {e}")

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–∏–≥–∞—Ü–∏–π –∏–∑ yields + –∏—Ö —Ü–µ–Ω—ã
    bond_list = []
    for row in yields_data:
        secid = row[secid_y_idx]
        boardid = row[boardid_y_idx]
        price_raw = row[price_idx]

        if price_raw is None:
            continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã

        try:
            close = float(price_raw)
        except (TypeError, ValueError):
            continue

        bond_list.append({
            "secid": secid,
            "boardid": boardid,
            "close": close
        })

    if not bond_list:
        return []

    # === 2. –ü–∞—Ä—Å–∏–º marketdata (–¥–ª—è –æ–±—ä—ë–º–æ–≤) ===
    market_data = raw_data.get("marketdata", {}).get("data", [])
    market_columns = raw_data.get("marketdata", {}).get("columns", [])
    if not market_data or not market_columns:
        # –ï—Å–ª–∏ –Ω–µ—Ç marketdata ‚Äî –≤—Å–µ –æ–±—ä—ë–º—ã —Å—á–∏—Ç–∞—é—Ç—Å—è 0 ‚Üí –∏—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –æ–±–ª–∏–≥–∞—Ü–∏–∏
        return []

    try:
        secid_m_idx = market_columns.index("SECID")
        boardid_m_idx = market_columns.index("BOARDID")
        voltoday_idx = market_columns.index("VALTODAY")
    except ValueError as e:
        raise ValueError(f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ marketdata: {e}")

    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ–±—ä—ë–º–∞ –ø–æ (SECID, BOARDID)
    volume_dict = {}
    for row in market_data:
        secid = row[secid_m_idx]
        boardid = row[boardid_m_idx]
        voltoday = row[voltoday_idx]

        volume = 0
        if voltoday is not None:
            try:
                volume = int(voltoday)
                if volume < 0:
                    volume = 0
            except (TypeError, ValueError):
                volume = 0

        volume_dict[(secid, boardid)] = volume

    # === 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å–≤–µ—á–∏, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–ø–æ—Ç–æ—Ä–≥–æ–≤–∞–≤—à–∏–µ—Å—è –æ–±–ª–∏–≥–∞—Ü–∏–∏ ===
    result = []
    for bond in bond_list:
        key = (bond["secid"], bond["boardid"])
        volume = volume_dict.get(key, 0)

        # –ò—Å–∫–ª—é—á–∞–µ–º –æ–±–ª–∏–≥–∞—Ü–∏–∏ —Å –Ω—É–ª–µ–≤—ã–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—ä—ë–º–æ–º
        if volume <= 0:
            continue

        result.append({
            "ticker": bond["secid"],
            "date": target_date,
            "close": bond["close"],
            "volume": volume
        })
    for i in result:
        if i["volume"] is None or i["volume"] == 0:
            print(i["ticker"])
    return result


async def update_bond_daily_candles():
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–µ—á–∏ –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ 00:35).
    """
    logger.info("[Bond Candles] üïó –ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–µ—á–µ–π –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º...")

    start_time = time.time()

    async with MOEXClient() as client:
        try:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            # {
            #   "marketdata_yields": { "columns": [...], "data": [...] },
            #   "marketdata": { "columns": [...], "data": [...] }
            # }
            raw_data = await client.get_bonds()
            if not raw_data:
                logger.warning("[Bond Candles] ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return

            candles = get_bond_candles(raw_data)
            if not candles:
                logger.warning("[Bond Candles] üì≠ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –æ–±–ª–∏–≥–∞—Ü–∏–π")
                return

            async with get_db() as db:
                await insert_daily_candles(db, candles)

            duration = time.time() - start_time
            logger.info(f"[Bond Candles] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –∑–∞ {duration:.2f} —Å–µ–∫")

        except Exception as e:
            logger.error(f"[Bond Candles] ‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
            raise