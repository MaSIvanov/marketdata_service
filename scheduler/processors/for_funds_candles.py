# scheduler/processors/for_funds_candles.py

from datetime import datetime
from typing import List, Dict, Any
from scheduler.clients.moex_client import MOEXClient
from scheduler.database.dao import insert_daily_candles
from scheduler.database.engine import get_db
import logging
import time

logger = logging.getLogger("scheduler.funds_candles")


def get_funds_candles(raw_data: dict) -> List[Dict[str, Any]]:
    """
    –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–æ–Ω–¥–∞–º (ETF/–ü–ò–§) —Å MOEX –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CLOSEPRICE, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω; –∏–Ω–∞—á–µ ‚Äî LAST.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ boardid (TQTF, TQIF –∏ –¥—Ä.), –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ marketdata –æ–¥–∏–Ω–∞–∫–æ–≤–∞.

    :param raw_data: –û—Ç–≤–µ—Ç –æ—Ç MOEX API (—Å–µ–∫—Ü–∏–∏ securities + marketdata)
    :return: –°–ø–∏—Å–æ–∫ —Å–≤–µ—á–µ–π: [{"ticker": str, "date": date, "close": float, "volume": int}, ...]
    """
    marketdata = raw_data.get("marketdata")
    if not marketdata or "data" not in marketdata or "columns" not in marketdata:
        raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω —Ä–∞–∑–¥–µ–ª 'marketdata'")

    columns = marketdata["columns"]
    rows = marketdata["data"]

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (SYSTIME –∏ SECID –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã; CLOSEPRICE –∏–ª–∏ LAST ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–∑–∞–∏–º–æ–∑–∞–º–µ–Ω—è–µ–º—ã)
    required_cols = {"SECID", "VOLTODAY", "SYSTIME"}
    if not required_cols.issubset(columns):
        missing = required_cols - set(columns)
        raise ValueError(f"–í marketdata –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")

    secid_idx = columns.index("SECID")
    vol_idx = columns.index("VOLTODAY")
    systime_idx = columns.index("SYSTIME")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Ü–µ–Ω—ã
    close_idx = columns.index("CLOSEPRICE") if "CLOSEPRICE" in columns else None
    last_idx = columns.index("LAST") if "LAST" in columns else None

    if close_idx is None and last_idx is None:
        raise ValueError("–ù–∏ CLOSEPRICE, –Ω–∏ LAST –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ marketdata")

    result = []
    for row in rows:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
        max_needed = max(
            secid_idx,
            vol_idx,
            systime_idx,
            close_idx if close_idx is not None else -1,
            last_idx if last_idx is not None else -1
        )
        if len(row) <= max_needed:
            continue

        try:
            secid = row[secid_idx]
            voltoday = row[vol_idx]
            systime_str = row[systime_idx]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ–±—ä—ë–º–∞
            if voltoday in (None, "", 0, "0"):
                continue

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            if not systime_str or not isinstance(systime_str, str):
                continue
            date_part = systime_str.split(" ")[0]
            candle_date = datetime.strptime(date_part, "%Y-%m-%d").date()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É: —Å–Ω–∞—á–∞–ª–∞ CLOSEPRICE, –ø–æ—Ç–æ–º LAST
            closeprice = None
            if close_idx is not None:
                closeprice = row[close_idx]
            if closeprice is None and last_idx is not None:
                closeprice = row[last_idx]

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç —Ü–µ–Ω—ã
            if closeprice is None:
                continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            close = float(closeprice)
            volume = int(float(voltoday))  # –Ω–∞ —Å–ª—É—á–∞–π "12345.0"
            if volume <= 0:
                continue

            result.append({
                "ticker": secid,
                "date": candle_date,
                "close": close,
                "volume": volume
            })

        except (ValueError, TypeError, IndexError, KeyError):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            continue

    return result


async def update_funds_daily_candles(boardid: str):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–µ—á–µ–π –ø–æ —Ñ–æ–Ω–¥–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ.
    """
    logger.info(f"[Funds Candles | {boardid}] üïó –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–µ—á–µ–π...")

    start_time = time.time()

    async with MOEXClient() as client:
        try:
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç boardid
            if boardid == "TQTF":
                raw_data = await client.get_tqtf_funds()
            elif boardid == "TQIF":
                raw_data = await client.get_tqif_funds()
            else:
                raise ValueError(f"–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π boardid: {boardid}")

            if not raw_data or "marketdata" not in raw_data:
                logger.warning(f"[Funds Candles | {boardid}] ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return

            candles = get_funds_candles(raw_data)  # ‚Üê boardid –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è
            if not candles:
                logger.warning(f"[Funds Candles | {boardid}] üì≠ –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return

            async with get_db() as db:
                await insert_daily_candles(db, candles)

            duration = time.time() - start_time
            logger.info(f"[Funds Candles | {boardid}] ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(candles)} —Å–≤–µ—á–µ–π –∑–∞ {duration:.2f} —Å–µ–∫")

        except Exception as e:
            logger.error(f"[Funds Candles | {boardid}] ‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
            raise


# === Wrapper-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ===

async def update_tqtf_candles():
    await update_funds_daily_candles("TQTF")

async def update_tqif_candles():
    await update_funds_daily_candles("TQIF")