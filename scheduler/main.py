# scheduler/main.py

import asyncio
import signal
import logging
import sys
from contextlib import AsyncExitStack
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine

# –ò–º–ø–æ—Ä—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á ‚Äî —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –≤–Ω—É—Ç—Ä–∏
from scheduler.processors.for_stocks import update_stocks
from scheduler.processors.for_bonds import update_bonds
from scheduler.processors.for_funds import update_etf_tqtf, update_etf_tqif
from scheduler.processors.for_indices import update_indexes
from scheduler.processors.for_currencies import update_currencies
from scheduler.processors.for_capitalization import update_capitalization
from scheduler.processors.for_stocks_candles import update_daily_candles
from scheduler.processors.for_bonds_candles import update_bond_daily_candles
from scheduler.processors.for_indices_candles import update_indices_daily_candles
from scheduler.processors.for_funds_candles import update_tqif_candles, update_tqtf_candles
# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from scheduler.database.engine import engine
from scheduler.settings import settings
import pytz

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("scheduler")


exit_stack = AsyncExitStack()
moscow_tz = pytz.timezone('Europe/Moscow')
scheduler = AsyncIOScheduler(timezone=moscow_tz)


async def shutdown(signal_name: str = None):
    if signal_name:
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}. –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    if scheduler.running:
        scheduler.shutdown(wait=False)
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    await exit_stack.aclose()
    await engine.dispose()
    logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


async def wait_for_db(max_retries: int = 30, delay: int = 2):
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î...")
    temp_engine = create_async_engine(settings.DATABASE_URL)

    for i in range(max_retries):
        try:
            async with temp_engine.connect() as conn:
                await conn.execute(text("SELECT 1"))
            logger.info("‚úÖ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞")
            await temp_engine.dispose()
            return
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{max_retries}): {e}")
            await asyncio.sleep(delay)

    await temp_engine.dispose()
    raise RuntimeError("‚ùå –ë–î –Ω–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è")


async def initial_load():
    if not settings.SCHEDULER_INITIAL_LOAD:
        logger.info("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)")
        return

    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
    tasks = [
        update_stocks(),
        update_bonds(),
        update_etf_tqtf(),
        update_etf_tqif(),
        update_indexes(),
        update_currencies(),
        update_capitalization(),
    ]

    for task in tasks:
        try:
            await task
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    logger.info("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def setup_scheduler():
    try:
        scheduler.add_job(update_stocks, IntervalTrigger(minutes=10), id="update_stocks", misfire_grace_time=300, max_instances=1)
        scheduler.add_job(update_bonds, IntervalTrigger(minutes=15), id="update_bonds", misfire_grace_time=300, max_instances=1)
        scheduler.add_job(update_etf_tqtf, IntervalTrigger(minutes=20), id="update_etf_tqtf", misfire_grace_time=600, max_instances=1)
        scheduler.add_job(update_etf_tqif, IntervalTrigger(minutes=30), id="update_etf_tqif", misfire_grace_time=300, max_instances=1)
        scheduler.add_job(update_indexes, IntervalTrigger(minutes=30), id="update_indexes", misfire_grace_time=900, max_instances=1)
        scheduler.add_job(update_currencies, IntervalTrigger(hours=1), id="update_currencies", misfire_grace_time=1800, max_instances=1)
        scheduler.add_job(update_capitalization, IntervalTrigger(hours=1), id="update_capitalization", misfire_grace_time=1800, max_instances=1)
        # === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏ ‚Äî —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ —Å—É–±–±–æ—Ç—É, 00:30‚Äì00:34 MSK ===
        scheduler.add_job(
            update_tqif_candles,
            CronTrigger(hour=0, minute=30, day_of_week="tue-sat", timezone=moscow_tz),
            id="tqif_daily_candles",
            misfire_grace_time=7200,
            max_instances=1
        )
        scheduler.add_job(
            update_tqtf_candles,
            CronTrigger(hour=0, minute=31, day_of_week="tue-sat", timezone=moscow_tz),
            id="tqtf_daily_candles",
            misfire_grace_time=7200,
            max_instances=1
        )
        scheduler.add_job(
            update_bond_daily_candles,
            CronTrigger(hour=0, minute=32, day_of_week="tue-sat", timezone=moscow_tz),
            id="bond_daily_candles",
            misfire_grace_time=7200,
            max_instances=1
        )
        scheduler.add_job(
            update_indices_daily_candles,
            CronTrigger(hour=0, minute=33, day_of_week="tue-sat", timezone=moscow_tz),
            id="index_daily_candles",
            misfire_grace_time=7200,
            max_instances=1
        )
        scheduler.add_job(
            update_daily_candles,
            CronTrigger(hour=0, minute=34, timezone=moscow_tz),
            id="daily_candles",
            misfire_grace_time=7200,
            max_instances=1
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise


async def main():
    signals = (signal.SIGINT, signal.SIGTERM)
    for sig in signals:
        asyncio.get_event_loop().add_signal_handler(
            sig,
            lambda s=sig: asyncio.create_task(shutdown(s.name))
        )

    try:
        await wait_for_db()
        await initial_load()

        setup_scheduler()
        scheduler.start()
        logger.info("üöÄ –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")

        while True:
            await asyncio.sleep(settings.SCHEDULER_HEALTH_CHECK_INTERVAL)
            logger.debug("ü´Ä Health check - —à–µ–¥—É–ª–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except asyncio.CancelledError:
        logger.info("‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        await shutdown()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)