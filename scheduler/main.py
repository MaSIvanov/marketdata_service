import asyncio
import signal
import logging
import sys
from contextlib import AsyncExitStack
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from sqlalchemy import text
from sqlalchemy.ext.asyncio import create_async_engine

# –ò–º–ø–æ—Ä—Ç—ã —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –Ω–µ –º–µ–Ω—è–π, –≤—Å—ë –∫–∞–∫ —É —Ç–µ–±—è
from scheduler.database.engine import engine, get_db
from scheduler.database.models import Base
from scheduler.database.dao import upsert_market_data
from scheduler.clients.moex_client import MOEXClient
from scheduler.processors.for_stocks import process_stock_data
from scheduler.processors.for_bonds import process_bonds_data
from scheduler.processors.for_indices import process_index_data
from scheduler.processors.for_funds import process_fund_data
from scheduler.settings import settings  # ‚Üê —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# ========================
# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ========================
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("scheduler")

# ========================
# üß± –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ========================
exit_stack = AsyncExitStack()
scheduler = AsyncIOScheduler()

# ========================
# üõë Graceful shutdown
# ========================
async def shutdown(signal_name: str = None):
    if signal_name:
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}. –ù–∞—á–∏–Ω–∞–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    if scheduler.running:
        scheduler.shutdown(wait=False)
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    await exit_stack.aclose()
    await engine.dispose()
    logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


# ========================
# ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î
# ========================
async def wait_for_db(max_retries: int = 30, delay: int = 2):
    """–ñ–¥—ë—Ç, –ø–æ–∫–∞ –ë–î —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç settings.DATABASE_URL"""
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î...")
    temp_engine = create_async_engine(settings.DATABASE_URL)  # ‚Üê —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    for i in range(max_retries):
        try:
            async with temp_engine.connect() as conn:
                await conn.execute(text("SELECT 1"))
            logger.info("‚úÖ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞")
            await temp_engine.dispose()
            return
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i + 1}/{max_retries}): {e}")
            await asyncio.sleep(delay)

    await temp_engine.dispose()
    raise RuntimeError("‚ùå –ë–î –Ω–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è")


# ========================
# üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
# ========================
async def create_tables_if_not_exist():
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ë–î...")
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")


# ========================
# üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
# ========================
async def run_update_task(task_name: str, fetch_func, process_func):
    logger.info(f"[{task_name}] –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    start_time = asyncio.get_event_loop().time()

    async with MOEXClient() as client:
        try:
            raw_data = await fetch_func(client)
            if not raw_data or 'securities' not in raw_data:
                logger.warning(f"[{task_name}] –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return

            records_count = len(raw_data.get('securities', {}).get('data', []))
            logger.debug(f"[{task_name}] –ü–æ–ª—É—á–µ–Ω–æ {records_count} –∑–∞–ø–∏—Å–µ–π")

            processed_data = process_func(raw_data)
            if not processed_data:
                logger.warning(f"[{task_name}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            async with get_db() as db:
                await upsert_market_data(db, processed_data)

            duration = asyncio.get_event_loop().time() - start_time
            logger.info(f"[{task_name}] ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(processed_data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ {duration:.2f} —Å–µ–∫")

        except Exception as e:
            logger.error(f"[{task_name}] ‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)


# ========================
# üìà –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
# ========================
async def update_stocks():
    await run_update_task("Stocks", lambda client: client.get_stocks(), process_stock_data)

async def update_bonds():
    await run_update_task("Bonds", lambda client: client.get_bonds(), process_bonds_data)

async def update_etf_tqtf():
    await run_update_task("ETF_TQTF", lambda client: client.get_tqtf_funds(), process_fund_data)

async def update_etf_tqif():
    await run_update_task("ETF_TQIF", lambda client: client.get_tqif_funds(), process_fund_data)

async def update_indexes():
    await run_update_task("Indexes", lambda client: client.get_indexes(), process_index_data)


# ========================
# üö¶ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# ========================
async def initial_load():
    if not settings.SCHEDULER_INITIAL_LOAD:
        logger.info("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞)")
        return

    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏...")
    tasks = [
        update_stocks(),
        update_bonds(),
        update_etf_tqtf(),
        update_etf_tqif(),
        update_indexes()
    ]

    for task in tasks:
        try:
            await task
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

    logger.info("‚úÖ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# ========================
# ‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# ========================
def setup_scheduler():
    try:
        # max_instances=1 ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
        scheduler.add_job(update_stocks, IntervalTrigger(minutes=10), id="update_stocks", misfire_grace_time=300, max_instances=1)
        scheduler.add_job(update_bonds, IntervalTrigger(minutes=15), id="update_bonds", misfire_grace_time=300, max_instances=1)
        scheduler.add_job(update_etf_tqtf, IntervalTrigger(minutes=20), id="update_etf_tqtf", misfire_grace_time=600, max_instances=1)
        scheduler.add_job(update_etf_tqif, IntervalTrigger(minutes=30), id="update_etf_tqif", misfire_grace_time=300, max_instances=1)
        scheduler.add_job(update_indexes, IntervalTrigger(minutes=30), id="update_indexes", misfire_grace_time=900, max_instances=1)
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
        raise


# ========================
# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ========================
async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signals = (signal.SIGINT, signal.SIGTERM)
    for sig in signals:
        asyncio.get_event_loop().add_signal_handler(
            sig,
            lambda s=sig: asyncio.create_task(shutdown(s.name))
        )

    try:
        # 1. –ñ–¥—ë–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ë–î ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º settings.DATABASE_URL
        await wait_for_db()

        # 2. –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables_if_not_exist()

        # 3. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)
        await initial_load()

        # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —à–µ–¥—É–ª–µ—Ä
        setup_scheduler()
        scheduler.start()
        logger.info("üöÄ –®–µ–¥—É–ª–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...")

        # 5. Health-check loop ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ settings
        while True:
            await asyncio.sleep(settings.SCHEDULER_HEALTH_CHECK_INTERVAL)
            logger.debug("ü´Ä Health check - —à–µ–¥—É–ª–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")

    except asyncio.CancelledError:
        logger.info("‚èπÔ∏è  –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        raise
    finally:
        await shutdown()


# ========================
# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
# ========================
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –†—É—á–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        sys.exit(1)